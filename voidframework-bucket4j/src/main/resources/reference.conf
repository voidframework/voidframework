voidframework {

    # Core configuration
    core {

        acceptedScanPaths += "dev.voidframework.bucket4j.module"
    }

    # Bucket4J configuration
    # Read more at https://github.com/bucket4j/bucket4j
    bucket4j {
    #
    #    # The bucket name must only contain alphanumeric characters (A-Z a-z 0-9).
    #    # You can create as many buckets as you like
    #    bucketName {
    #
    #        # Defines the strategy of synchronization which need to be applied
    #        # to prevent data-races in multithreading usage scenario
    #        #
    #        # Available values: LOCK_FREE, SYNCHRONIZED, NONE
    #        # Default value: LOCK_FREE
    #        # synchronizationStrategy = "LOCK_FREE"
    #
    #        # Defines the bandwidth limits to assign to the Bucket.
    #        # You can create as many buckets as you like
    #        bandwidthLimits = [
    #            {
    #
    #                # Defines unique identifier of bandwidth. This identifier can be used
    #                # for bandwidth comparision during configuration replacement
    #                id = "bandwidth-unique-id"
    #
    #                # Defines the maximum count of tokens which can be hold by bucket
    #                capacity = 128
    #
    #                # "refill" defines the speed in which tokens are regenerated
    #                refill = {
    #
    #                    # Defines the refill strategy to use
    #                    #
    #                    # - GREEDY            : Try to add the tokens to bucket as soon as possible. For example, "60
    #                    #                       tokens for a period of 1 minute" will add 1 token per each second.
    #                    # - INTERVALLY        : Try to add the tokens to bucket at end of each period. For example, "60
    #                    #                       tokens for a period of 1 minute" will add 60 token each minute.
    #                    # - INTERVALLY_ALIGNED: Try to add the tokens to bucket at end of each period. For example, "60
    #                    #                       tokens for a period of 1 minute" will add 60 token each minute. In
    #                    #                       additional to "INTERVALLY", it is possible to specify the time when first
    #                    #                       refill should happen (see "timeOfFirstRefill")
    #                    #
    #                    # Available values: GREEDY, INTERVALLY, INTERVALLY_ALIGNED
    #                    strategy = "INTERVALLY_ALIGNED"
    #
    #                    # Defines the amount of tokens
    #                    tokens = 20
    #
    #                    # Defines the period within tokens will be fully regenerated
    #                    # following units can be used:
    #                    #  - ms, millis, milliseconds
    #                    #  - s, seconds
    #                    #  - m, minutes
    #                    #  - h, hours
    #                    #  - d, days
    #                    #
    #                    # ie: period = "5 minutes"
    #                    period = "5 minutes"
    #
    #                    # Defines the initial number of tokens.
    #                    #
    #                    # This option will be ignored if strategy "INTERVALLY_ALIGNED" and
    #                    # the option "useAdaptiveInitialTokens" are used
    #                    initialTokens = 20
    #
    #                    # Defines wait time before the first refill
    #                    #
    #                    # This option is only used if strategy "INTERVALLY_ALIGNED" is used
    #                    timeOfFirstRefill = "5 minutes"
    #
    #                    # If enabled, the number of initial tokens will be reduced
    #                    #
    #                    # This option is only used if strategy "INTERVALLY_ALIGNED" is used
    #                    # and override the option "initialToken"
    #                    useAdaptiveInitialTokens = true
    #                }
    #            }
    #        ]
    #    }
    }
}
